AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: e11 grader Lambda with custom domain (grader.csci-e-11.org)

Parameters:
  DynamoTableArn:
    Type: String
    Description: ARN of existing DynamoDB table for grades/logs
  SesFromAddress:
    Type: String
    Description: Verified SES sender address
  SshSecretId:
    Type: String
    Description: Secrets Manager SecretId/ARN containing the SSH private key
  ZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for csci-e-11.org (e.g., Z123ABC...)
  CertificateArn:
    Type: String
    Default: ""
    Description: "(Optional) Existing ACM certificate ARN for grader.csci-e-11.org. Leave blank to auto-create."

Globals:
  Function:
    Timeout: 30
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'content-type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Forwarded-For'"
      AllowOrigin: "'*'"
      EnableSimpleResponses: true

Conditions:
  CreateAcmCert: !Equals [!Ref CertificateArn, ""]

Resources:
  # Optional: create a regional ACM cert for grader.csci-e-11.org (DNS validated in Route53)
  GraderCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateAcmCert
    Properties:
      DomainName: grader.csci-e-11.org
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: grader.csci-e-11.org
          HostedZoneId: !Ref ZoneId

  # HTTP API with custom domain grader.csci-e-11.org
  GraderHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      # Optional CORS if you'll hit from browsers; adjust as needed
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST','OPTIONS']
      Domain:
        DomainName: grader.csci-e-11.org
        CertificateArn: !If [CreateAcmCert, !Ref GraderCertificate, !Ref CertificateArn]
        Route53:
          HostedZoneId: !Ref HostedZoneId

  # Lambda (Flask app) â€” now fronted by the HttpApi and the custom domain
  E11GraderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      # IMPORTANT: export a Flask adapter handler here (see note below)
      Handler: grader.app.lambda_handler
      CodeUri: .
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          DDB_TABLE_ARN: !Ref DynamoTableArn
          SES_FROM: !Ref SesFromAddress
          SSH_SECRET_ID: !Ref SshSecretId
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: DynWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:DescribeTable
              Resource: !Ref DynamoTableArn
            - Sid: SesSend
              Effect: Allow
              Action: ses:SendEmail
              Resource: '*'
            - Sid: SecretsGet
              Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref SshSecretId
      Events:
        # Proxy everything to Flask; it will serve "/" (HTML) and "/api/grade" (JSON)
        RootProxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref GraderHttpApi
            Path: /
            Method: ANY
        GreedyProxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref GraderHttpApi
            Path: /{proxy+}
            Method: ANY
    Metadata:
      BuildMethod: makefile

Outputs:
  GraderFunction:
    Description: Grader Lambda function name
    Value: !Ref E11GraderFunction
  ApiId:
    Description: HTTP API ID
    Value: !Ref GraderHttpApi
  ApiInvokeUrl:
    Description: Regional invoke URL (stage)
    Value: !Sub "https://${GraderHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  CustomDomainUrl:
    Description: Custom domain base URL
    Value: "https://grader.csci-e-11.org/"
