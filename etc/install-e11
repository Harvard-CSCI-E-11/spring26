#!/bin/bash
set -euo pipefail

SCRIPT_DIR=$(dirname "$(realpath "$0")")

if [ ! -r /etc/os-release ]; then
    echo /etc/os-release not found. Exiting.
    exit 1
fi

source /etc/os-release
if [ $VERSION_ID != 24.04 ]; then
    echo This script can only run on Ubuntu 24.04
    exit 1
fi

SYSTEM_UUID=$(sudo -n dmidecode --string system-uuid)
FIRST_THREE=$(echo $SYSTEM_UUID | awk '{print substr($0,1,3)}')
if [ $FIRST_THREE != 'ec2' ]; then
    echo This script can only be run on EC2
    exit 1
fi

echo Setting up Ubuntu 24.04 LTS on EC2 for CSCI E-11
TOKEN=$(curl -sS -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
METADATA=$(curl -sS -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document)
if [ "${METADATA}x" = "x" ]; then
        echo Instance does not have access to dynamic metadata. You must fix this in the AWS console before continuing
        exit 1
fi

# Get AWS region and set up the Ubuntu mirror
REGION="$(echo $METADATA | jq -r .region)"
MIRROR="http://${REGION}.ec2.archive.ubuntu.com/ubuntu/"
echo AWS Region: $REGION
echo Setting Ubuntu mirror to $MIRROR
sudo sed -i "s|http://.*.ubuntu.com/ubuntu/|$MIRROR|g" /etc/apt/sources.list.d/ubuntu.sources

# Install CSCI E-11 pipx, poetry, and the e11 command
echo Install apt items
sudo apt -y update
sudo apt -y install pipx python-is-python3

# Update PATH at the top of the .bashrc file, before the exit for non-interactive shells.
grep -q 'export PATH="\$HOME/.local/bin:\$PATH"' ~/.bashrc || \
    sed -i '1s|^|export PATH="$HOME/.local/bin:$PATH"\n|' ~/.bashrc

source $HOME/.bashrc			  # update the PATH
pipx install poetry                       # downloads and installed in $HOME/.local/bin
poetry config virtualenvs.in-project true # store local environment in .venv


if [ ! -r $SCRIPT_DIR/e11-cli ]; then
    echo Error: $SCRIPT_DIR/e11-cli not found.
    exit 1
fi
(cd $SCRIPT_DIR/e11-cli; pipx install . --force)

################################################################

# Lab 1 setup
if [ -z ${NO_HACK_ME+x} ]; then
    $SCRIPT_DIR/.install-backdoor
else
    echo -e '\nWelcome Wizard\n'27
fi

# Lab3 setup
(cd $HOME/spring26/lab3 && /bin/rm -f server.py && cp -p simple_flask_application.py server.py)

# Make linux a bit friendlier
cat >>"$HOME/.bashrc" <<'EOF'
alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -i"
EOF

# Make emacs a bit friendler
touch $HOME/.emacs
cat >>"$HOME/.emacs" <<'EOF'
;; Revert changed files/buffers quietly
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)

;; Trim whitespace only in programming modes, buffer-locally
(add-hook 'prog-mode-hook
          (lambda ()
            (add-hook 'before-save-hook #'delete-trailing-whitespace nil t)))

(setq-default indent-tabs-mode nil)
(setq-default ttl-indent-level 4)
(setq c-basic-offset 4)
(setq require-final-newline t)

;; Clipboard: disable only in terminal Emacs (e.g., iTerm2); keep GUI normal
(when (not (display-graphic-p))
  (when (fboundp 'xterm-clipboard-mode) (xterm-clipboard-mode -1))
  (setq interprogram-cut-function nil
        interprogram-paste-function nil))
;; (Optional) leave this true so GUI clipboards still work:
;; (setq select-enable-clipboard t)

(defun my-suspend-hook ()
  "Save some buffers and perform auto-save before suspending Emacs."
  (save-some-buffers t)
  (do-auto-save t))
(add-hook 'suspend-hook #'my-suspend-hook)

(add-hook 'makefile-mode-hook (lambda () (setq indent-tabs-mode t)))
EOF

################################################################
echo Wait for system to complete seeding...
sudo snap wait system seed.loaded
sudo snap install --classic aws-cli

echo Installer ran to completion
