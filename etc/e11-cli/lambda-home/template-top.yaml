# HOW TO DEPLOY WITH SAM (creates samconfig.toml on first guided deploy):
#   make generate-templates
#   sam build -t template.yaml
#   sam deploy -t template.yaml --guided --profile fas
#     # Answer the prompts; you'll be asked for:
#     #   - Stack Name (e.g., e11-home)
#     #   - AWS Region (e.g., us-east-1)
#     #   - Parameters: DynamoTableArn, HostedZoneId
#     #   - (Optional) CertificateArn; leave blank to auto-create one in ACM
#   # On next runs:
#   make generate-templates && sam build && sam deploy
#
# Live:
#   sam sync --stack-name e11-home --template template.yaml
# Result:
#   - An HTTP API at https://csci-e-11.org/
#   - Routes handled by the Lambda handler in home.py (lambda_handler)
#   - JSON API (POST) for grading; also supports ping/ping-mail actions

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: e11 home Lambda with custom domain (csci-e-11.org)

Globals:
  Function:
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        DDB_TABLE_ARN: !Ref UsersTableArn          # existing users table
        OIDC_SECRET_ID: !Ref OidcSecretId
        SESSIONS_TABLE_NAME: !Ref SessionsTable     # new (optional helper)
        SESSIONS_TABLE_ARN: !GetAtt SessionsTable.Arn

Parameters:
  UsersTableArn:
    Type: String
    Description: ARN of existing DynamoDB table for grades/logs
  OidcSecretId:
    Type: String
    Description: Secrets Manager SecretId/ARN containing the OIDC data
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for csci-e-11.org (e.g., Z123ABC...)
  CertificateArn:
    Type: String
    Default: ""
    Description: "(Optional) Existing ACM certificate ARN for csci-e-11.org. Leave blank to auto-create."
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues: [CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET]
    Description: Default LOG_LEVEL environment value for the function

Conditions:
  CreateAcmCert: !Equals [!Ref CertificateArn, ""]

Resources:
  # Optional, auto-created ACM cert for the custom domain (regional, DNS validated)
  HomeCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateAcmCert
    Properties:
      DomainName: csci-e-11.org
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: csci-e-11.org
          HostedZoneId: !Ref HostedZoneId

  # HTTP API fronting the Lambda, bound to csci-e-11.org in Route53
  HomeHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST','OPTIONS']
      Domain:
        DomainName: csci-e-11.org
        CertificateArn: !If [CreateAcmCert, !Ref HomeCertificate, !Ref CertificateArn]
        Route53:
          HostedZoneId: !Ref HostedZoneId
