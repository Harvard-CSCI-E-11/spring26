# HOW TO DEPLOY WITH SAM (creates samconfig.toml on first guided deploy):
#   sam build -t template.yaml
#   sam deploy -t template.yaml --guided --profile fas
#     # Answer the prompts; you'll be asked for:
#     #   - Stack Name (e.g., e11-home)
#     #   - AWS Region (e.g., us-east-1)
#     #   - Parameters: DynamoTableArn, HostedZoneId
#     #   - (Optional) CertificateArn; leave blank to auto-create one in ACM
#   # On next runs:
#   sam build && sam deploy
#
# Live:
#   sam sync --stack-name e11-home --template template.yaml
# Result:
#   - An HTTP API at https://csci-e-11.org/
#   - Routes handled by the Lambda handler in home.py (lambda_handler)
#   - JSON API (POST) for grading; also supports ping/ping-mail actions
#
# Watch:
# aws logs tail "/aws/lambda/home-app-E11HomeFunction-Z2cp02sKKeiW"   --since 15m --follow --region us-east-1 --profile fas
#
# Grab zip of deployment:
# FUNC=home-app-E11HomeFunction-Z2cp02sKKeiW
# aws lambda get-function --function-name "$FUNC" --query 'Code.Location' --output text --region us-east-1 --profile fas | xargs curl -sSLo /tmp/home.zip
# unzip -l /tmp/home.zip | egrep '(^.* home\.py$|^e11/|/e11/)'

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: e11 home Lambda with custom domain (csci-e-11.org)

Parameters:
  UsersTableArn:
    Type: String
    Description: ARN of existing DynamoDB table for grades/logs
  OidcSecretId:
    Type: String
    Description: Secrets Manager SecretId/ARN containing the OIDC data
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for csci-e-11.org (e.g., Z123ABC...)
  CertificateArn:
    Type: String
    Default: ""
    Description: "(Optional) Existing ACM certificate ARN for csci-e-11.org. Leave blank to auto-create."
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues: [CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET]
    Description: Default LOG_LEVEL environment value for the function

Conditions:
  CreateAcmCert: !Equals [!Ref CertificateArn, ""]
  UseExisting: !Equals [!Ref UseExistingDomain, "true"]

Resources:
  # Optional, auto-created ACM cert for the custom domain (regional, DNS validated)
  HomeCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateAcmCert
    Properties:
      DomainName: csci-e-11.org
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: csci-e-11.org
          HostedZoneId: !Ref HostedZoneId

  # HTTP API fronting the Lambda, bound to csci-e-11.org in Route53
  HomeHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST','OPTIONS']
      Domain:
        DomainName: csci-e-11.org
        CertificateArn: !If [CreateAcmCert, !Ref HomeCertificate, !Ref CertificateArn]
        Route53:
          HostedZoneId: !Ref HostedZoneId


  # Lambda function â€” JSON-only API (no Flask)
  E11HomeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.13
      CodeUri: src/
      Handler: home_app.home.lambda_handler
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          DDB_TABLE_ARN: !Ref UsersTableArn
          OIDC_SECRET_ID: !Ref OidcSecretId
          LOG_LEVEL: !Ref LogLevel            # default; can be overridden per request JSON
          SESSIONS_TABLE_NAME: !Ref SessionsTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: DynamoTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:DescribeTable
              Resource: !Ref UsersTableArn
            - Sid: SessionsRW
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:DescribeTable
              Resource: !GetAtt SessionsTable.Arn
            - Sid: SessionsRWIndexes
              Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !Sub "${SessionsTable.Arn}/index/*"
            - Sid: SecretsGet
              Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref OidcSecretId
      Events:
        AnyRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref HomeHttpApi
            Path: /
            Method: ANY
            PayloadFormatVersion: "2.0"
        AnyProxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HomeHttpApi
            Path: /{proxy+}
            Method: ANY
            PayloadFormatVersion: "2.0"
#        Heartbeat:
#          Type: Schedule
#          Properties:
#            Schedule: rate(5 minutes)
#            Input: '{"action":"heartbeat"}'


  # Sessions table holds the cookie sessions
  # It is createdd by the SAM (it's a resource)
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sessions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sid
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: sid
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      GlobalSecondaryIndexes:
        - IndexName: GSI_Email
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

Outputs:
  HomeFunction:
    Description: Home Lambda function name
    Value: !Ref E11HomeFunction
  ApiId:
    Description: HTTP API ID
    Value: !Ref HomeHttpApi
  CustomDomainUrl:
    Description: Public base URL
    Value: "https://csci-e-11.org/"
