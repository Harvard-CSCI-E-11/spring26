#
# Deploy with:
# sam deploy --profile fas
# or put this in samconfig.toml:
# [default.deploy.parameters]
# profile = "fas"

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Grader application

Parameters:
  FQDN:
    Type: String
    Description: Fully qualified domain name
  ZoneId:
    Type: String
    Description: Route53 Zone ID

Globals:
  Function:
    Timeout: 30
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'content-type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Forwarded-For'"
      AllowOrigin: "'*'"
      EnableSimpleResponses: true

Resources:
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref FQDN
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName: !Ref FQDN
        HostedZoneId: !Ref ZoneId

  # Custom domain name for the API Gateway HttpApi
  CustomDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref FQDN
      DomainNameConfigurations:
        - CertificateArn: !Ref GenerateCertificate
          EndpointType: REGIONAL

  # API Gateway API mapping for the custom domain
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref ServerlessHttpApi
      DomainName: !Ref CustomDomainName
      Stage: $default

  # Route53 record to map the custom domain name to the API Gateway domain
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref ZoneId
      Name: !Ref FQDN
      Type: A
      AliasTarget:
        DNSName: !GetAtt CustomDomainName.RegionalDomainName
        HostedZoneId: !GetAtt CustomDomainName.RegionalHostedZoneId

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: grader_app/
      Handler: run.sh
      #Handler: app.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Environment:
        Variables:
          GRADER_TABLE: !Ref GraderTable
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          PORT: 8000
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerX86:23
      Events:
        ApiEvent:
          Type: HttpApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GraderTable


  # Define the DynamoDB table used to hold the Grader
  # We index on the name. Each entry is a JSON object whose structure is determiend at runtime.
  # The table is automatically created with 'sam deploy' and destroyed with 'sam delete'
  GraderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Grader    # only needs to be unique within the account
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${FQDN}"
  FlaskApi:
    Description: "API Gateway endpoint URL for Prod stage for Flask function"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"
  FlaskFunction:
    Description: "Flask Lambda Function ARN"
    Value: !GetAtt FlaskFunction.Arn
  FlaskIamRole:
    Description: "Implicit IAM Role created for Flask function"
    Value: !GetAtt FlaskFunctionRole.Arn
